---
resources:
- name: concourse-pipeline-resource-develop
  type: git
  source:
    branch: develop
    private_key: {{concourse-pipeline-resource-git-deploy-private-key}}
    uri: git@github.com:robdimsdale/concourse-pipeline-resource.git

- name: concourse-pipeline-resource-master
  type: git
  source:
    branch: master
    private_key: {{concourse-pipeline-resource-git-deploy-private-key}}
    uri: git@github.com:robdimsdale/concourse-pipeline-resource.git

- name: concourse-pipeline-resource-image
  type: docker-image
  source:
    username: {{docker-username}}
    email: {{docker-email}}
    password: {{docker-password}}
    repository: robdimsdale/concourse-pipeline-resource

- name: concourse-pipeline-resource-rootfs
  type: s3
  source:
    bucket: concourse-pipeline-resource-artifacts
    regexp: rootfs-(.*).tar
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}

- name: version
  type: semver
  source:
    driver: git
    uri: git@github.com:robdimsdale/concourse-pipeline-resource-version.git
    file: version
    branch: master
    private_key: {{concourse-pipeline-resource-version-git-deploy-private-key}}
    initial_version: 0.0.1

- name: tracker
  type: tracker
  source:
    token: {{tracker-token}}
    project_id: {{tracker-project-id}}
    tracker_url: https://www.pivotaltracker.com

- name: concourse-pipeline-resource-github-release
  type: github-release
  source:
    access_token: {{concourse-pipeline-resource-github-release-access-token}}
    repository: concourse-pipeline-resource
    user: robdimsdale

- name: check-binary
  type: s3
  source:
    bucket: concourse-pipeline-resource-artifacts
    regexp: check-(.*)
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}

- name: in-binary
  type: s3
  source:
    bucket: concourse-pipeline-resource-artifacts
    regexp: in-(.*)
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}

- name: out-binary
  type: s3
  source:
    bucket: concourse-pipeline-resource-artifacts
    regexp: out-(.*)
    access_key_id: {{aws-access-key-id}}
    secret_access_key: {{aws-secret-access-key}}

- name: robdimsdale-ci
  type: git
  source:
    branch: master
    uri: https://github.com/robdimsdale/robdimsdale-ci.git

jobs:
- name: test
  public: true
  plan:
  - aggregate:
    - get: ci-scripts
      resource: robdimsdale-ci
    - get: concourse-pipeline-resource
      resource: concourse-pipeline-resource-develop
      trigger: true
  - aggregate:
    - task: unit-test
      file: ci-scripts/concourse-pipeline-resource/unit-test/task.yml
      params:
        TARGET: {{test-target}}
        USERNAME: {{test-username}}
        PASSWORD: {{test-password}}
    - task: acceptance-test
      file: ci-scripts/concourse-pipeline-resource/acceptance-test/task.yml
      params:
        TARGET: {{test-target}}
        USERNAME: {{test-username}}
        PASSWORD: {{test-password}}

- name: rc
  serial_groups: [version]
  public: true
  plan:
  - aggregate:
    - get: ci-scripts
      resource: robdimsdale-ci
    - get: concourse-pipeline-resource
      resource: concourse-pipeline-resource-develop
      passed: [test]
      trigger: true
    - get: version
      params: {pre: rc}
  - aggregate:
    - task: build
      file: ci-scripts/concourse-pipeline-resource/build/task.yml
    - task: write-release-candidate-tag
      file: ci-scripts/concourse-pipeline-resource/write-release-candidate-file/task.yml
  - aggregate:
    - put: concourse-pipeline-resource-image
      params:
        build: build-output
        tag: version/version
        tag_prefix: v
        rootfs: true
      get_params: {rootfs: true}
    - put: concourse-pipeline-resource-image
      params:
        build: build-output
        tag: release-candidate-file/tag
        rootfs: true
      get_params: {rootfs: true}
  - aggregate:
    - task: version-binaries
      file: ci-scripts/concourse-pipeline-resource/version-binaries/task.yml
    - task: version-rootfs
      file: ci-scripts/concourse-pipeline-resource/version-rootfs/task.yml
  - aggregate:
    - put: check-binary
      params: {file: versioned-binaries/check-*}
    - put: in-binary
      params: {file: versioned-binaries/in-*}
    - put: out-binary
      params: {file: versioned-binaries/out-*}
    - put: concourse-pipeline-resource-rootfs
      params: {file: versioned-rootfs/rootfs-*.tar}
    - put: version
      params: {file: version/version}
    - put: tracker
      params:
        repos: [concourse-pipeline-resource]

- name: shipit
  serial_groups: [version]
  public: true
  plan:
  - aggregate:
    - get: ci-scripts
      resource: robdimsdale-ci
    - get: concourse-pipeline-resource
      resource: concourse-pipeline-resource-develop
      passed: [rc]
    - get: version
      passed: [rc]
      params: {bump: final}
    - get: concourse-pipeline-resource-image
      passed: [rc]
      params: {save: true}
    - get: check-binary
      passed: [rc]
    - get: in-binary
      passed: [rc]
    - get: out-binary
      passed: [rc]
  - task: write-latest-final-tag
    file: ci-scripts/concourse-pipeline-resource/write-tag-file/task.yml
    params:
      TAG: latest-final
  - aggregate:
    - put: concourse-pipeline-resource-image
      params:
        load_base: concourse-pipeline-resource-image
        load_repository: robdimsdale/concourse-pipeline-resource
        load_file: concourse-pipeline-resource-image/image
        tag: version/version
        tag_prefix: v
      get_params: {rootfs: true}
    - put: concourse-pipeline-resource-image
      params:
        load_base: concourse-pipeline-resource-image
        load_repository: robdimsdale/concourse-pipeline-resource
        load_file: concourse-pipeline-resource-image/image
        tag: tag-file/tag
      get_params: {rootfs: true}
  - aggregate:
    - task: version-rootfs
      file: ci-scripts/concourse-pipeline-resource/version-rootfs/task.yml
    - task: finalize-files
      file: ci-scripts/concourse-pipeline-resource/finalize-files/task.yml
  - aggregate:
    - put: concourse-pipeline-resource-rootfs
      params: {file: versioned-rootfs/rootfs-*.tar}
    - put: concourse-pipeline-resource-master
      params:
        repository: concourse-pipeline-resource
        tag: version/version
        tag_prefix: v
    - put: version
      params: {file: version/version}
    - put: check-binary
      params: {file: finalized-files/check-*}
    - put: in-binary
      params: {file: finalized-files/in-*}
    - put: out-binary
      params: {file: finalized-files/out-*}

- name: github-releases
  serial_groups: [version]
  public: true
  plan:
  - aggregate:
    - get: ci-scripts
      resource: robdimsdale-ci
    - get: concourse-pipeline-resource-rootfs
      passed: [shipit]
      trigger: true
    - get: version
      passed: [shipit]
    - get: check-binary
      passed: [shipit]
    - get: in-binary
      passed: [shipit]
    - get: out-binary
      passed: [shipit]
  - task: create-tag-prefix-file
    config:
      platform: linux
      image: docker:///ubuntu#14.04
      inputs: [{name: version}]
      outputs: [{name: tag}]
      run:
        path: "/bin/sh"
        args:
        - -c
        - |
          set -x
          echo -n "v$(cat version/version)" > tag/tag
  - aggregate:
    - put: concourse-pipeline-resource-github-release
      params:
        name: tag/tag
        tag: tag/tag
        globs:
        - concourse-pipeline-resource-rootfs/rootfs-*
        - check-binary/check-*
        - in-binary/in-*
        - out-binary/out-*

- name: major
  public: true
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: major, pre: rc}
  - put: version
    params: {file: version/version}

- name: minor
  public: true
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: minor, pre: rc}
  - put: version
    params: {file: version/version}

- name: patch
  public: true
  serial_groups: [version]
  plan:
  - get: version
    params: {bump: patch, pre: rc}
  - put: version
    params: {file: version/version}

- name: auto-patch
  public: true
  serial_groups: [version]
  plan:
  - get: version
    passed: [github-releases]
    params: {bump: patch, pre: rc}
    trigger: true
  - put: version
    params: {file: version/version}

